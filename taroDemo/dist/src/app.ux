<style src="./app.css"></style>
<script>
import Taro, { Component as __BaseComponent, internal_safe_get, internal_get_original, internal_inline_style, handleLoopRef, genCompid, genLoopCompid, propsManager } from "./npm/@tarojs/taro-quickapp/index.js";

// 如果需要在 h5 环境中开启 React Devtools
// 取消以下注释：
// if (process.env.NODE_ENV !== 'production' && process.env.TARO_ENV === 'h5')  {
//   require('nerv-devtools')
// }
import AnalysysAgent from "./sdk/AnalysysAgent_QuickApp_SDK.custom.es6.min.js";
// import AnalysysEncryption from './sdk/AnalysysAgent_encryption.es6.min.js';
let AnalysysEncryption = require('./sdk/AnalysysAgent_encryption.min.js');

class _App extends __BaseComponent {
  constructor() {
    super(...arguments);
    /**
     * 指定config的类型声明为: Taro.Config
     *
     * 由于 typescript 对于 object 类型推导只能推出 Key 的基本类型
     * 对于像 navigationBarTextStyle: 'black' 这样的推导出的类型是 string
     * 提示和声明 navigationBarTextStyle: 'black' | 'white' 类型冲突, 需要显示声明类型
     */

    this.globalData = {
      "AnalysysAgent": AnalysysAgent,
      'system': 'ios'
    };
  }
  componentDidMount() {
    console.log(55555, AnalysysEncryption);
AnalysysAgent.encrypt = AnalysysEncryption; //加密模块的方法赋值给AnalysysAgent，方便调用。
AnalysysAgent.debugMode = 2;
// AnalysysAgent.uploadURL = "http://192.168.220.105:8089"
AnalysysAgent.appkey = 'heatmaptest0916';
AnalysysAgent.autoProfile = false;
AnalysysAgent.encryptType = 0; //使用加密文件的时候 放开赋值。（直接放开不会报错）
AnalysysAgent.uploadURL = 'https://arkpaastest.analysys.cn:4089'; // 明文
// AnalysysAgent.uploadURL = 'https://arksdk.analysys.cn:4089'    //密文
// AnalysysAgent.uploadURL = 'https://arksdktest.analysys.cn:4069'    //密文
AnalysysAgent.registerSuperProperty("member",'VIP');
AnalysysAgent.identify("sanbo")
  }
  componentDidShow() {
    this.__listenToSetNavigationBarEvent();

    console.log("show");
    AnalysysAgent.appStart({});
  }
  componentDidHide() {
    this.__offListenToSetNavigationBarEvent();
  }
  componentDidCatchError() {}
  // 在 App 类中的 render() 函数没有实际作用
  // 请勿修改此函数

  _createData() {}

  config = {
    pages: ['pages/index/index', 'pages/logs/logs'],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    }
  };

  hasComponentWillMount() {}

  __listenToSetNavigationBarEvent() {
    if (!Taro.eventCenter.callbacks['TaroEvent:setNavigationBar']) {
      Taro.eventCenter.on('TaroEvent:setNavigationBar', params => {
        if (params.title) {
          this.$scope.$page.setTitleBar({
            text: params.title
          });
        }

        if (params.frontColor) {
          this.$scope.$page.setTitleBar({
            textColor: params.frontColor
          });
        }

        if (params.backgroundColor) {
          this.$scope.$page.setTitleBar({
            backgroundColor: params.backgroundColor
          });
        }
      });
    }
  }

  __offListenToSetNavigationBarEvent() {
    Taro.eventCenter.off('TaroEvent:setNavigationBar');
  }

}

export default require('./npm/@tarojs/taro-quickapp/index.js').default.createApp(_App);
Taro.initPxTransform({
  "designWidth": 750,
  "deviceRatio": {
    "640": 1.17,
    "750": 1,
    "828": 0.905
  }
});
</script>
